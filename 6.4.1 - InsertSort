def getInvCount(arr, n):
# Если произвести сортировку слиянием (по алгоритму, описанному в лекции) 
# и при совершении каждой перестановки (т.е. каждый раз, когда находящийся справа, 
# элемент передвигаем на 1 влево) увеличиваем счётчик на 1, 
# то суммарное приращение счётчика и будет числом инверсий.
    inv_count = 0
    for i in range(n):
        for j in range(i + 1, n):
            if (arr[i] > arr[j]):
                inv_count += 1
    return inv_count

n=int(input())
n_array =[] 
n_array = list(map(int, input().split()))
print(getInvCount(n_array, n))


static Int32[] Merge_Sort(Int32[] massive)
    {
        if (massive.Length == 1)
            return massive;
        Int32 mid_point = massive.Length / 2;
        return Merge(Merge_Sort(massive.Take(mid_point).ToArray()), Merge_Sort(massive.Skip(mid_point).ToArray()));
    }

    static Int32[] Merge(Int32[] mass1, Int32[] mass2)
    {
        Int32 a = 0, b = 0;
        Int32[] merged = new int[mass1.Length + mass2.Length];
        for (Int32 i = 0; i < mass1.Length + mass2.Length; i++)
        {
            if (b < mass2.Length && a < mass1.Length)
                if (mass1[a] > mass2[b])
                    merged[i] = mass2[b++];
                else //if int go for
                    merged[i] = mass1[a++];
            else
                if (b < mass2.Length)
                    merged[i] = mass2[b++];
                else
                    merged[i] = mass1[a++];
        }
        return merged;
    }
